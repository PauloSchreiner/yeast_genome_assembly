import os
from datetime import datetime
import glob

# Load configuration
configfile: "config/config.yaml"

# --- Project Structure Setup ---
# Get absolute path to project root (where you run snakemake)
PROJECT_ROOT = os.getcwd()

# Set results paths
RESULTS_DIR = os.path.join(PROJECT_ROOT, config.get("results_root", "results"))

# Generate run_id if not provided
if "run_id" not in config or not config["run_id"]:
    run_id = f"run_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    print(f"Generated run_id: {run_id}")
else:
    run_id = config["run_id"]
    print(f"Using config run_id: {run_id}")


RUN_DIR = os.path.join(RESULTS_DIR, run_id)
SAMPLE_DIR = os.path.join(RUN_DIR, "samples")

# Ensure required directories exist
os.makedirs(SAMPLE_DIR, exist_ok=True)
os.makedirs(os.path.join(PROJECT_ROOT, "external/busco"), exist_ok=True)

# --- Sample Detection ---
def get_samples():
    samples = []
    raw_data_dir = os.path.join(PROJECT_ROOT, "data/raw")
    
    # Check if raw data directory exists
    if not os.path.exists(raw_data_dir):
        raise FileNotFoundError(f"Raw data directory not found: {raw_data_dir}")
    
    # Find all sample directories
    for sample_name in os.listdir(raw_data_dir):
        sample_path = os.path.join(raw_data_dir, sample_name)
        if os.path.isdir(sample_path):
            # Find paired FASTQ files
            r1_files = glob.glob(os.path.join(sample_path, "*1.fq.gz"))
            r2_files = glob.glob(os.path.join(sample_path, "*2.fq.gz"))
            
            if r1_files and r2_files:
                samples.append(sample_name)
            else:
                print(f"Warning: Sample {sample_name} is missing paired FASTQ files")
    
    if not samples:
        raise ValueError("No valid samples found in data/raw directory")
    
    print(f"Found {len(samples)} samples: {', '.join(samples)}")
    return samples

SAMPLES = get_samples()

# Detect total number of CPU threads from Snakemake --cores
TOTAL_THREADS = workflow.cores

# Set optimal threads per tool
FASTP_THREADS = max(1, TOTAL_THREADS // 2)
MEGAHIT_THREADS = max(1, TOTAL_THREADS)
RAGTAG_THREADS = max(1, TOTAL_THREADS // 2)
BUSCO_THREADS = max(1, TOTAL_THREADS // 2)
QUAST_THREADS = max(1, TOTAL_THREADS // 2)
AUGUSTUS_THREADS = 1

# --- Rules ---
rule all:
    input:
        expand(
            os.path.join(
                SAMPLE_DIR,
                "{sample}",
                "busco",
                f"short_summary.specific.{config['busco_lineage']}.busco_results.txt"
            ),
            sample=SAMPLES
        ),
        expand(
            os.path.join(SAMPLE_DIR, "{sample}", "quast", "report.html"),
            sample=SAMPLES
        )

# Helper function to find FASTQ files
def find_fastq(wildcards, read):
    pattern = os.path.join(
        PROJECT_ROOT, "data/raw", wildcards.sample, f"*_{read}.fq.gz"
    )
    files = glob.glob(pattern)
    if not files:
        raise FileNotFoundError(f"No {read} files found for sample {wildcards.sample}")
    return files[0]

rule fastp:
    input:
        r1 = lambda wildcards: find_fastq(wildcards, "1"),
        r2 = lambda wildcards: find_fastq(wildcards, "2")
    output:
        r1 = os.path.join(SAMPLE_DIR, "{sample}", "fastp", "clean_R1.fq.gz"),
        r2 = os.path.join(SAMPLE_DIR, "{sample}", "fastp", "clean_R2.fq.gz"),
        html = os.path.join(SAMPLE_DIR, "{sample}", "fastp", "report.html"),
        json = os.path.join(SAMPLE_DIR, "{sample}", "fastp", "report.json")
    threads: FASTP_THREADS
    shell:
        """
        fastp --in1 {input.r1} --in2 {input.r2} \
              --out1 {output.r1} --out2 {output.r2} \
              --trim_poly_x --correction \
              --html {output.html} --json {output.json} \
              --thread {threads}
        """

rule megahit:
    input:
        r1 = rules.fastp.output.r1,
        r2 = rules.fastp.output.r2
    output: 
        contigs = os.path.join(SAMPLE_DIR, "{sample}", "megahit", "final.contigs.fa")    
    threads: MEGAHIT_THREADS
    resources:
        mem_mb = int(config["ram_percentage"] * os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES') / (1024 ** 2))
    shell:
        """
        # It is necessary to use a temporary directory because 
        # MEGAHIT does not allow the output directory to exist beforehand,
        # and Snakemake creates output directories automatically >:(

        tmpdir="/tmp/megahit_{wildcards.sample}_$RANDOM" 
        megahit -1 {input.r1} -2 {input.r2} \
                -o "$tmpdir" \
                -t {threads} \
                --memory {resources.mem_mb}
        mkdir -p $(dirname {output.contigs})
        mv "$tmpdir/final.contigs.fa" {output.contigs}
        rm -rf "$tmpdir"
        """


rule ragtag_correct:
    input:
        ref = os.path.join(PROJECT_ROOT, config["reference"]),
        contigs = rules.megahit.output.contigs
    output:
        dir = directory(os.path.join(SAMPLE_DIR, "{sample}", "ragtag", "correct")),
        corrected = os.path.join(SAMPLE_DIR, "{sample}", "ragtag", "correct", "ragtag.correct.fasta")
    threads: RAGTAG_THREADS
    shell:
        """
        ragtag.py correct {input.ref} {input.contigs} \
                -o {output.dir} \
                -t {threads}
        """

rule ragtag_scaffold:
    input:
        ref = os.path.join(PROJECT_ROOT, config["reference"]),
        corrected = rules.ragtag_correct.output.corrected
    output:
        dir = directory(os.path.join(SAMPLE_DIR, "{sample}", "ragtag", "scaffold")),
        scaffolded = os.path.join(SAMPLE_DIR, "{sample}", "ragtag", "scaffold", "ragtag.scaffold.fasta")
    threads: RAGTAG_THREADS
    shell:
        """
        ragtag.py scaffold {input.ref} {input.corrected} \
                -o {output.dir} \
                -t {threads}
        """

rule ragtag_patch:
    input:
        ref = os.path.join(PROJECT_ROOT, config["reference"]),
        scaffolded = rules.ragtag_scaffold.output.scaffolded
    output:
        dir = directory(os.path.join(SAMPLE_DIR, "{sample}", "ragtag", "patch")),
        patched = os.path.join(SAMPLE_DIR, "{sample}", "ragtag", "patch", "ragtag.patch.fasta")
    threads: RAGTAG_THREADS
    shell:
        """
        ragtag.py patch {input.ref} {input.scaffolded} \
                -o {output.dir} \
                -t {threads}
        """

rule busco:
    input:
        assembly = rules.ragtag_patch.output.patched
    output:
        summary = os.path.join(
            SAMPLE_DIR,
            "{sample}",
            "busco",
            "short_summary.specific.{lineage}.busco_results.txt"
        )
    params:
        lineage = config["busco_lineage"],
        out_dir = os.path.join(SAMPLE_DIR, "{sample}", "busco"),
        download_path = os.path.join(PROJECT_ROOT, "external/busco")
    threads: BUSCO_THREADS
    shell:
        """
        # Create output directory
        mkdir -p "{params.out_dir}"
        
        busco -i {input.assembly} \
              -o busco_results \
              -l {params.lineage} \
              -m genome \
              -c {threads} \
              --out_path "{params.out_dir}" \
              --download_path "{params.download_path}"
        
        # Move summary to standard location
        mv "{params.out_dir}/busco_results/short_summary.specific.{params.lineage}.busco_results.txt" "{output.summary}"
        """

rule quast:
    input:
        assembly = rules.ragtag_patch.output.patched
    output:
        report = os.path.join(SAMPLE_DIR, "{sample}", "quast", "report.html")
    params:
        outdir = os.path.join(SAMPLE_DIR, "{sample}", "quast")
    threads: QUAST_THREADS
    shell:
        """
        # Create output directory
        mkdir -p "{params.outdir}"
        
        quast.py {input.assembly} \
                 -o "{params.outdir}" \
                 --threads {threads}
        """

rule augustus:
    input:
        assembly = rules.ragtag_patch.output.patched
    output:
        gff = os.path.join(SAMPLE_DIR, "{sample}", "augustus", "predictions.gff")
    params:
        outdir = os.path.join(SAMPLE_DIR, "{sample}", "augustus")
    threads: AUGUSTUS_THREADS
    shell:
        """
        # Create output directory
        mkdir -p "{params.outdir}"
        
        augustus --species=saccharomyces_cerevisiae_S288C \
                 --genemodel=intronless \
                 --gff3=on \
                 {input.assembly} \
                 > "{output.gff}"
        """